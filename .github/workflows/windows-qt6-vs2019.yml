name: windows-qt6-vs2019

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      CONAN_USER_HOME: ${{ github.workspace }}/conan_home

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [windows-2019]
        build_type: [Release]
        c_compiler: [cl]
        include:
          - os: windows-2019
            c_compiler: cl
            cpp_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies
        cache-dependency-path: .github/workflows/requirements.txt
  
    - run: pip install -r .github/workflows/requirements.txt

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: output
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        dir: '${{ github.workspace }}/qt6.5.0'
        install-deps: 'true'
        modules: 'qtshadertools qtquickeffectmaker qtvirtualkeyboard qtquick3d'
        cache: 'true'
        cache-key-prefix: 'install-qt-action-Qt6.5.0'
        setup-python: 'false'
        tools: 'tools_ifw tools_cmake tools_qtcreator,qt.tools.qtcreator'
        set-env: 'true'
        tools-only: 'false'
        aqtversion: '==3.1.*'
        py7zrversion: '==0.20.*'
    
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        key: ${{ matrix.os }}-${{ matrix.build_type }}
        path: ${{ env.CONAN_USER_HOME }}

    - name: Config Conan
      run: |
        conan config init
        echo $CONAN_USER_HOME
      shell: pwsh

    - name: Console env
      run: |
          echo "Printing all environment variables:"
          Get-ChildItem Env: | Sort-Object Name
      shell: pwsh

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.output.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCMAKE_CXX_STANDARD=17
        -DKMS_DEPS="kms-qrcode_generator"
        -DBUILD_KMS_MODULES=""
        -DBUILD_TESTING=ON
        -DBUILD_ALL_TESTING=ON

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.output.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    
    - name: Generate plugin and test application
      working-directory: ${{ steps.output.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cmake --build . --config ${{ matrix.build_type }} --target ant-test-apps

    - name: Generate timestamp
      id: time
      uses: nanzm/get-time-action@master
      with: 
        timeZone: UTC+8
        format: 'YYYY-MM-DD-HH-mm-ss'

    - name: Archive plugins
      uses: actions/upload-artifact@v4
      env:
        TIME: "${{ steps.time.outputs.time }}"
      with:
        name: ant-plugins-${{ env.TIME }}
        path: | 
          ${{ steps.output.outputs.build-output-dir }}/plugins

    - name: Archive test application artifacts
      uses: actions/upload-artifact@v4
      env:
        TIME: "${{ steps.time.outputs.time }}"
      with:
        name: ant-test-apps-${{ env.TIME }}
        path: | 
          ${{ steps.output.outputs.build-output-dir }}/unittests
          ${{ steps.output.outputs.build-output-dir }}/plugins
